import { Command } from "#lib/command";
import { GoogleGenAI } from "@google/genai";
import {
  ApplicationCommandType,
  CacheType,
  ContextMenuCommandBuilder,
  MessageContextMenuCommandInteraction,
} from "discord.js";

const name = "Explain Like I'm 5";
const ai = new GoogleGenAI({});

export default class extends Command {
  public static commandName = name;

  public static builder() {
    return new ContextMenuCommandBuilder()
      .setName(name)
      .setType(ApplicationCommandType.Message);
  }

  public static async contextMenuRun(
    interaction: MessageContextMenuCommandInteraction<CacheType>
  ) {
    await interaction.deferReply();
    const message = interaction.targetMessage;

    const explanation = await ai.models.generateContent({
      model: "gemini-2.5-flash-lite-preview-06-17",
      contents: message.cleanContent,
      config: {
        systemInstruction:
          "Explain the following message as if the reader is a 5-year-old. Use simple language and concepts, avoiding complex terms or jargon. The explanation should be clear and easy to understand, focusing on the main idea without unnecessary details in short max-to-max reaching a few sentences.",
        temperature: 0.6,
      },
    });

    try {
      const messageChannel = await interaction.client.channels.fetch(
        message.channelId
      );

      if (!messageChannel || !messageChannel.isTextBased())
        throw new Error("Channel not found or is not a text channel.");

      const replyMessage = await messageChannel.messages.fetch(message.id);

      if (!replyMessage)
        throw new Error("Original message not found in the channel.");

      await replyMessage.reply({
        content:
          explanation.text +
          `\n\n-# Explanation generated by ${interaction.user}`,
        allowedMentions: {
          users: [],
          roles: [],
        },
      });

      await interaction.editReply({
        content: "Explanation sent!",
      });

      await interaction.deleteReply();
    } catch {
      await interaction.editReply({
        content:
          explanation.text +
          `\n\n-# [Original Message](${message.url}) | Invite me to the server for better experience!`,
        allowedMentions: {
          users: [],
          roles: [],
        },
      });
    }
  }
}
