import { Command } from "#lib/command";
import { GoogleGenAI } from "@google/genai";
import {
  ApplicationCommandType,
  CacheType,
  ContextMenuCommandBuilder,
  MessageContextMenuCommandInteraction,
  MessageFlags,
} from "discord.js";

const name = "TL;DR";
const ai = new GoogleGenAI({});

export default class extends Command {
  public static override commandName = name;

  public static override builder() {
    return new ContextMenuCommandBuilder()
      .setName(name)
      .setType(ApplicationCommandType.Message);
  }

  public static override async contextMenuRun(
    interaction: MessageContextMenuCommandInteraction<CacheType>
  ) {
    const message = interaction.targetMessage;

    if (message.content.trim().length < 169) {
      await interaction.reply({
        content: "Damn bro, you need a TL;DR for that? Seriously? *Chucks*",
        flags: MessageFlags.Ephemeral,
      });
    }

    await interaction.deferReply();

    const tldr = await ai.models.generateContent({
      model: "gemini-2.5-flash-lite-preview-06-17",
      contents: message.cleanContent ?? message.content,
      config: {
        systemInstruction:
          "Summarize the following conversation in a concise and objective way. Keep it under 3 sentences (or a maximum of 4-5 bullet points only if the text extends a few paragraphs). Focus only on the key points or decisions made. Do not include filler words, greetings, or emojis. Begin the summary with 'TL;DR:'. For context, this message was send by " +
          message.author.displayName,
      },
    });

    try {
      const messageChannel = await interaction.client.channels.fetch(
        message.channelId
      );

      if (!messageChannel || !messageChannel.isTextBased())
        throw new Error("Channel not found or is not a text channel.");

      const replyMessage = await messageChannel.messages.fetch(message.id);

      if (!replyMessage)
        throw new Error("Original message not found in the channel.");

      await replyMessage.reply({
        content: tldr.text + `\n\n-# TL;DR generated by ${interaction.user}`,
        allowedMentions: {
          users: [],
          roles: [],
        },
      });

      await interaction.editReply({
        content: `TL;DR generated and sent to the original message.`,
      });

      await interaction.deleteReply();
    } catch {
      await interaction.editReply({
        content:
          tldr.text +
          "\n\n-# TIP: Add me to this server for a better experience",
        allowedMentions: {
          users: [],
          roles: [],
        },
      });
    }
  }
}
